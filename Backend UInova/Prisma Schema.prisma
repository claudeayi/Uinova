// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  PREMIUM
  ADMIN
}

enum ProjectStatus {
  PLANIFIE
  EN_COURS
  TERMINE
}

enum SubscriptionPlan {
  FREE
  PRO
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
}

enum ExportTarget {
  HTML
  REACT
  FLUTTER
  PWA
  ZIP
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  CINETPAY
  MOCK
}

enum PaymentStatus {
  CREATED
  SUCCEEDED
  FAILED
  REFUNDED
}

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  passwordHash  String
  name          String?
  role          UserRole         @default(USER)
  avatarUrl     String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  projects      Project[]
  pages         Page[]           @relation("PageEditors")
  notifications Notification[]
  userBadges    UserBadge[]
  subscriptions Subscription[]
  payments      Payment[]
  uploads       Upload[]
}

model Project {
  id          String         @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus  @default(PLANIFIE)
  owner       User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  pages       Page[]
  exports     ExportJob[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([ownerId])
  @@index([status])
}

model Page {
  id          String    @id @default(cuid())
  name        String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  schemaJSON  Json
  // Ã©diteurs secondaires (collab)
  editors     User[]    @relation("PageEditors")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([projectId])
}

model ExportJob {
  id          String        @id @default(cuid())
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  target      ExportTarget
  status      String        @default("PENDING") // PENDING|RUNNING|DONE|ERROR
  resultUrl   String?
  error       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([projectId])
  @@index([target])
  @@index([status])
}

model Subscription {
  id               String             @id @default(cuid())
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  plan             SubscriptionPlan   @default(FREE)
  status           SubscriptionStatus @default(TRIAL)
  currentPeriodEnd DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  payments         Payment[]

  @@index([userId])
  @@index([plan, status])
}

model Payment {
  id             String           @id @default(cuid())
  provider       PaymentProvider
  providerRef    String?          // id Stripe/PayPal/Cinetpay
  amountCents    Int
  currency       String           @default("EUR")
  status         PaymentStatus    @default(CREATED)
  rawPayload     Json?
  createdAt      DateTime         @default(now())

  // rattachement
  user           User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         String?
  subscription   Subscription?    @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  subscriptionId String?

  @@index([provider, status])
  @@index([userId])
  @@index([subscriptionId])
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      String
  title     String
  body      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, read])
}

model Badge {
  id        String      @id @default(cuid())
  code      String      @unique
  label     String
  icon      String?
  createdAt DateTime    @default(now())

  users     UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  badgeId   String
  earnedAt  DateTime @default(now())

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}

model Upload {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  key       String   // chemin stockage
  url       String   // URL publique
  size      Int
  mime      String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([mime])
}
