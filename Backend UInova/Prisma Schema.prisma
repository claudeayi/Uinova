generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/* ============================================================================
 * ENUMS
 * ========================================================================== */
enum UserRole {
  USER
  PREMIUM
  ADMIN
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
}

enum ProjectStatus {
  PLANIFIE
  EN_COURS
  TERMINE
}

enum SubscriptionPlan {
  FREE
  PRO
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
}

enum ExportTarget {
  HTML
  REACT
  FLUTTER
  PWA
  ZIP
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  CINETPAY
  MOCK
}

enum PaymentStatus {
  CREATED
  SUCCEEDED
  FAILED
  REFUNDED
}

enum DeploymentStatus {
  PENDING
  RUNNING
  SUCCESS
  ERROR
}

enum MarketplaceType {
  TEMPLATE
  COMPONENT
}

/* ============================================================================
 * CORE MODELS
 * ========================================================================== */
model User {
  id            String           @id @default(cuid())
  email         String           @unique
  passwordHash  String
  name          String?
  role          UserRole         @default(USER)
  avatarUrl     String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  projects      Project[]
  pages         Page[]           @relation("PageEditors")
  notifications Notification[]
  userBadges    UserBadge[]
  subscriptions Subscription[]
  payments      Payment[]
  uploads       Upload[]
  auditLogs     AuditLog[]
  collabs       CollabHistory[]
  purchases     Purchase[]
  favorites     Favorite[]       // ‚≠ê Favoris utilisateur
  items         MarketplaceItem[]
  replays       ReplaySession[]
  emailLogs     EmailLog[]
  usageRecords  UsageRecord[]
  usageHistory  UsageHistory[]   // ‚≠ê Historique consommation (agr√©g√©)

  // ‚ö° Monitoring & s√©curit√©
  sessions      UserSession[]
  apiKeys       ApiKey[]

  // ‚ö° Multi-tenant
  memberships   Membership[]
  orgInvites    OrgInvite[]      @relation("Invitee")
}

/* ============================================================================
 * FAVORIS
 * ========================================================================== */
model Favorite {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  project     Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String?
  item        MarketplaceItem? @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      String?
  createdAt   DateTime         @default(now())

  @@index([userId])
  @@index([projectId])
  @@index([itemId])
}

/* ============================================================================
 * MARKETPLACE
 * ========================================================================== */
model MarketplaceItem {
  id          String           @id @default(cuid())
  type        MarketplaceType  @default(TEMPLATE)
  title       String
  description String?
  priceCents  Int              @default(0)
  currency    String           @default("EUR")
  published   Boolean          @default(true)
  owner       User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  shareId     String?          @unique // üîë pour preview public
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  purchases   Purchase[]
  favorites   Favorite[]
}

model Purchase {
  id          String           @id @default(cuid())
  item        MarketplaceItem  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      String
  buyer       User             @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId     String
  status      PaymentStatus    @default(CREATED) // ‚≠ê alignement front
  amountCents Int              @default(0)
  currency    String           @default("EUR")
  createdAt   DateTime         @default(now())

  @@index([buyerId])
  @@index([itemId])
  @@index([status])
}

/* ============================================================================
 * BILLING
 * ========================================================================== */
model UsageRecord {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId String?
  type      String   // api_call | ai_tokens | export_job | storage
  amount    Int
  meta      Json?
  createdAt DateTime @default(now())

  @@index([userId, type, createdAt])
  @@index([projectId])
}

model UsageHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  date      DateTime @default(now())
  apiCalls  Int      @default(0)
  storageMB Float    @default(0)
  projects  Int      @default(0)

  @@unique([userId, date])
  @@index([date])
}
