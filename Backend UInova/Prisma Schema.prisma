generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/* ============================================================================
 * ENUMS
 * ========================================================================== */
enum UserRole {
  USER
  PREMIUM
  ADMIN
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
}

enum ProjectStatus {
  PLANIFIE
  EN_COURS
  TERMINE
}

enum SubscriptionPlan {
  FREE
  PRO
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
}

enum ExportTarget {
  HTML
  REACT
  FLUTTER
  PWA
  ZIP
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  CINETPAY
  MOCK
}

enum PaymentStatus {
  CREATED
  SUCCEEDED
  FAILED
  REFUNDED
}

enum DeploymentStatus {
  PENDING
  RUNNING
  SUCCESS
  ERROR
}

enum PurchaseStatus {
  PENDING
  PAID
  FAILED
}

/* ============================================================================
 * CORE MODELS
 * ========================================================================== */
model User {
  id            String           @id @default(cuid())
  email         String           @unique
  passwordHash  String
  name          String?
  role          UserRole         @default(USER)
  avatarUrl     String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  projects      Project[]
  pages         Page[]           @relation("PageEditors")
  notifications Notification[]
  userBadges    UserBadge[]
  subscriptions Subscription[]
  payments      Payment[]
  uploads       Upload[]
  auditLogs     AuditLog[]
  collabs       CollabHistory[]
  purchases     Purchase[]
  favorites     Favorite[]
  items         MarketplaceItem[]
  replays       ReplaySession[]
  emailLogs     EmailLog[]
  usageRecords  UsageRecord[]
  usageHistory  UsageHistory[]

  // ⚡ Monitoring & sécurité
  sessions      UserSession[]
  apiKeys       ApiKey[]

  // ⚡ Multi-tenant
  memberships   Membership[]
  orgInvites    OrgInvite[]      @relation("Invitee")
}

/* ============================================================================
 * ORGANIZATIONS (Multi-tenant)
 * ========================================================================== */
model Organization {
  id          String        @id @default(cuid())
  name        String
  ownerId     String
  owner       User          @relation(fields: [ownerId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  memberships Membership[]
  projects    Project[]
  invites     OrgInvite[]   @relation("OrgInvites")

  @@index([ownerId])
}

model Membership {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  org         Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  role        OrgRole       @default(MEMBER)
  createdAt   DateTime      @default(now())

  @@unique([userId, orgId])
  @@index([orgId])
}

model OrgInvite {
  id          String        @id @default(cuid())
  org         Organization  @relation("OrgInvites", fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  email       String
  invitedBy   User          @relation("Invitee", fields: [invitedById], references: [id], onDelete: Cascade)
  invitedById String
  role        OrgRole       @default(MEMBER)
  accepted    Boolean       @default(false)
  createdAt   DateTime      @default(now())
}

/* ============================================================================
 * PROJECTS
 * ========================================================================== */
model Project {
  id           String         @id @default(cuid())
  name         String
  description  String?
  status       ProjectStatus  @default(PLANIFIE)
  owner        User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  org          Organization?  @relation(fields: [orgId], references: [id], onDelete: SetNull)
  orgId        String?
  pages        Page[]
  exports      ExportJob[]
  shareLinks   ShareLink[]
  collabs      CollabHistory[]
  deployments  Deployment[]
  replays      ReplaySession[]
  usageRecords UsageRecord[]
  favorites    Favorite[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([ownerId])
  @@index([orgId])
  @@index([status])
}

model Page {
  id          String    @id @default(cuid())
  name        String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  schemaJSON  Json
  editors     User[]    @relation("PageEditors")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([projectId])
}

model ExportJob {
  id          String        @id @default(cuid())
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  target      ExportTarget
  status      String        @default("PENDING")
  resultUrl   String?
  error       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([projectId])
  @@index([target])
  @@index([status])
}

/* ============================================================================
 * BILLING / SUBSCRIPTION
 * ========================================================================== */
model Subscription {
  id               String             @id @default(cuid())
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  plan             SubscriptionPlan   @default(FREE)
  status           SubscriptionStatus @default(TRIAL)
  currentPeriodEnd DateTime?
  usageLimitJson   Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  payments         Payment[]
  usageRecords     UsageRecord[]

  @@index([userId])
  @@index([plan, status])
}

model Payment {
  id             String           @id @default(cuid())
  provider       PaymentProvider
  providerRef    String?
  amountCents    Int
  currency       String           @default("EUR")
  status         PaymentStatus    @default(CREATED)
  rawPayload     Json?
  createdAt      DateTime         @default(now())

  user           User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         String?
  subscription   Subscription?    @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  subscriptionId String?
  project        Project?         @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId      String?

  @@index([provider, status])
  @@index([userId])
  @@index([subscriptionId])
  @@index([projectId])
}

model UsageRecord {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId String?
  type      String   // api_call | ai_tokens | export_job | storage
  amount    Int
  meta      Json?
  createdAt DateTime @default(now())

  @@index([userId, type, createdAt])
  @@index([projectId])
}

model UsageHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  date      DateTime @default(now())
  api       Int      @default(0)
  storageMB Float    @default(0)
  projects  Int      @default(0)
}

/* ============================================================================
 * COMMUNICATION
 * ========================================================================== */
model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      String   @default("info")
  title     String
  body      String?
  actionUrl String?
  meta      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, read])
  @@index([type])
}

model EmailTemplate {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  subject   String
  bodyHtml  String
  bodyText  String?
  lang      String   @default("fr")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs      EmailLog[]
}

model EmailLog {
  id          String         @id @default(cuid())
  template    EmailTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId  String?
  user        User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  to          String
  subject     String
  body        String
  status      String         // SUCCESS | FAILED
  error       String?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([status])
}

/* ============================================================================
 * MARKETPLACE
 * ========================================================================== */
model Badge {
  id        String      @id @default(cuid())
  code      String      @unique
  label     String
  icon      String?
  createdAt DateTime    @default(now())

  users     UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  badgeId   String
  earnedAt  DateTime @default(now())
  meta      Json?

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}

model MarketplaceItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  priceCents  Int      @default(0)
  currency    String   @default("EUR")
  published   Boolean  @default(true)
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  purchases   Purchase[]
  favorites   Favorite[]
}

model Purchase {
  id          String           @id @default(cuid())
  item        MarketplaceItem  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      String
  buyer       User             @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId     String
  status      PurchaseStatus   @default(PENDING)
  createdAt   DateTime         @default(now())

  @@index([buyerId, status])
  @@index([itemId])
}

model Favorite {
  id        String          @id @default(cuid())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
  template  MarketplaceItem? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String?
  createdAt DateTime        @default(now())

  @@unique([userId, projectId, templateId])
}

/* ============================================================================
 * DEPLOYMENTS & REPLAYS
 * ========================================================================== */
model Deployment {
  id          String           @id @default(cuid())
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  status      DeploymentStatus @default(PENDING)
  logs        String?
  targetUrl   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ReplaySession {
  id              String   @id @default(cuid())
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  dataUrl         String
  snapshot        Json?
  stepsCompressed Bytes?
  meta            Json?
  startedAt       DateTime @default(now())
  endedAt         DateTime?

  @@index([projectId])
  @@index([userId])
  @@index([startedAt])
}

/* ============================================================================
 * LOGS / SECURITY
 * ========================================================================== */
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
}

model ShareLink {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  token     String   @unique
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model CollabHistory {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  changes   Json
  createdAt DateTime @default(now())
}

model UserSession {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  expiredAt DateTime?
}

model ApiKey {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  key       String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
}
