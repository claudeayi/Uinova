backend/
├─ src/
│  ├─ app.ts                   # Config Express (middlewares, routes, Swagger, etc.)
│  ├─ server.ts                # Serveur HTTP + Socket.io collab
│  │
│  ├─ controllers/             # Logique métiers (REST)
│  │  ├─ authController.ts
│  │  ├─ projectController.ts
│  │  ├─ pageController.ts
│  │  ├─ exportController.ts
│  │  ├─ paymentController.ts
│  │  ├─ badgeController.ts
│  │  ├─ notificationController.ts
│  │  ├─ uploadController.ts
│  │  ├─ aiController.ts
│  │  ├─ marketplaceController.ts
│  │  ├─ deployController.ts
│  │  ├─ replayController.ts
│  │  ├─ monitoringController.ts
│  │  │
│  │  └─ admin/                # ⚡ Spécifique admin (séparé pour plus de clarté)
│  │     ├─ usersAdminController.ts
│  │     ├─ projectsAdminController.ts
│  │     ├─ marketplaceAdminController.ts
│  │     └─ replaysAdminController.ts
│  │
│  ├─ routes/                  # Définition des routes Express
│  │  ├─ auth.ts
│  │  ├─ projects.ts
│  │  ├─ pages.ts
│  │  ├─ exports.ts
│  │  ├─ payments.ts
│  │  ├─ badges.ts
│  │  ├─ notifications.ts
│  │  ├─ upload.ts
│  │  ├─ ai.ts
│  │  ├─ marketplace.ts
│  │  ├─ deploy.ts
│  │  ├─ replay.ts
│  │  ├─ monitoring.ts
│  │  └─ admin.ts              # regroupe toutes les routes admin
│  │
│  ├─ middlewares/
│  │  ├─ security.ts           # authenticate, authorize, authLimiter
│  │  ├─ validator.ts          # validateBody, validateQuery, validateParams
│  │  ├─ validate.ts           # schémas express-validator/zod
│  │  ├─ upload.ts             # config Multer
│  │  ├─ rateLimit.ts          # rate limiter global
│  │  └─ errorHandler.ts       # handler global erreurs
│  │
│  ├─ validators/              # Schemas Zod/Yup centralisés
│  │  ├─ marketplace.schema.ts
│  │  ├─ deploy.schema.ts
│  │  └─ ...
│  │
│  ├─ services/                # Services (intégrations externes, business logic avancée)
│  │  ├─ collab.ts             # Socket.io collab temps réel
│  │  ├─ paymentServices.ts    # Stripe / PayPal / CinetPay
│  │  ├─ exportService.ts      # Génération HTML/Flutter/JSON
│  │  ├─ aiService.ts          # IA générative (DeepSeek, OpenAI…)
│  │  ├─ deployService.ts      # Mock déploiement (Docker/K8s futur)
│  │  ├─ cloud.ts              # stockage fichiers / CDN
│  │  └─ aiModeration.ts       # modération prompts IA
│  │
│  ├─ utils/
│  │  ├─ prisma.ts             # client Prisma
│  │  ├─ jwt.ts                # génération/validation JWT
│  │  ├─ hash.ts               # hash mot de passe (bcrypt)
│  │  ├─ mailer.ts             # envoi mails (Sendgrid, Nodemailer…)
│  │  ├─ logger.ts             # logger Pino/Winston
│  │  └─ swagger.ts            # config Swagger + Redoc
│  │
│  ├─ __tests__/               # Tests unitaires et intégration
│  │  ├─ auth.test.ts
│  │  ├─ projects.test.ts
│  │  ├─ marketplace.test.ts
│  │  └─ ...
│  │
│  └─ types/                   # Types globaux TypeScript
│     └─ express.d.ts
│
├─ prisma/
│  ├─ schema.prisma            # ✅ version enrichie V3 (User, Project, Page, ExportJob, Payment, Subscription, Notification, Badge, Upload, AuditLog, ShareLink, CollabHistory, MarketplaceItem, Purchase, Deployment, ReplaySession…)
│  └─ seed.ts                  # Script de seed (badges, templates…)
│
├─ uploads/                    # Dossier des fichiers uploadés (statique ou via CDN)
│
├─ swagger.yaml                # Doc OpenAPI (auth, projects, marketplace, deploy, replay, monitoring…)
│
├─ package.json
├─ tsconfig.json
├─ Dockerfile
├─ docker-compose.yml          # ⚡ backend + MySQL + Prometheus + Grafana
├─ .dockerignore
├─ .env.example                # Clés test (Stripe, PayPal, CinetPay, OpenAI…)
└─ .github/workflows/ci.yml    # CI/CD GitHub Actions (lint, tests, swagger validation)
