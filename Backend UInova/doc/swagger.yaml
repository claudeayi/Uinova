openapi: 3.0.3
info:
  title: UInova API
  version: "1.0.0"
  description: >
    API UInova (Node.js + Express + Prisma + MySQL).
    Auth JWT, gestion projets/pages, exports, paiements (Stripe/PayPal/CinetPay), collaboration, IA, badges, notifications, uploads, admin.
servers:
  - url: http://localhost:5000
    description: Local

tags:
  - name: Auth
  - name: Home
  - name: Projects
  - name: Pages
  - name: Exports
  - name: Payments
  - name: Badges
  - name: Notifications
  - name: AI
  - name: Upload
  - name: Admin

paths:
  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthLoginBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthLoginResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRegisterBody"
      responses:
        "201":
          description: Created
        "409":
          description: Conflict (email already exists)

  /api/auth/me:
    get:
      tags: [Auth]
      summary: Current user profile
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/home/summary:
    get:
      tags: [Home]
      summary: Accueil projets (cards + totals)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 12 }
        - in: query
          name: withInsights
          schema: { type: string, enum: ["0","1"], default: "0" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HomeSummary"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/projects:
    get:
      tags: [Projects]
      summary: Liste filtrée des projets
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: status
          schema: { $ref: "#/components/schemas/ProjectStatusAPI" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/ProjectCard" }
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags: [Projects]
      summary: Créer un projet
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreateBody"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ProjectCard" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/projects/{id}:
    get:
      tags: [Projects]
      summary: Détail projet
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ProjectDetail" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags: [Projects]
      summary: Mettre à jour un projet
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectUpdateBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ProjectCard" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
    delete:
      tags: [Projects]
      summary: Supprimer un projet
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/pages/{projectId}:
    get:
      tags: [Pages]
      summary: Lister les pages d’un projet
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: projectId
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Page" }
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags: [Pages]
      summary: Créer une page dans un projet
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: projectId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PageCreateBody" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Page" }
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/pages/page/{id}:
    get:
      tags: [Pages]
      summary: Détail d’une page
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Page" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags: [Pages]
      summary: Mettre à jour le contenu d’une page
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PageUpdateBody" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Message" }
        "401":
          $ref: "#/components/responses/Unauthorized"
    delete:
      tags: [Pages]
      summary: Supprimer une page
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Message" }
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/exports/{projectId}/{pageId}:
    post:
      tags: [Exports]
      summary: Enregistrer un export pour une page
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: projectId
          required: true
          schema: { type: string }
        - in: path
          name: pageId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ExportCreateBody" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Export" }
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/exports/{pageId}:
    get:
      tags: [Exports]
      summary: Lister les exports d’une page
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: pageId
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Export" }
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/payments/stripe:
    post:
      tags: [Payments]
      summary: Créer un Payment Intent Stripe
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount]
              properties:
                amount: { type: integer, description: Montant en centimes }
                currency: { type: string, example: eur }
                description: { type: string }
                idempotencyKey: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  provider: { type: string, example: stripe }
                  clientSecret: { type: string }
                  paymentIntentId: { type: string }
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/badges:
    get:
      tags: [Badges]
      summary: Mes badges
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Badge" }
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags: [Badges]
      summary: Attribuer un badge à l’utilisateur courant
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type]
              properties:
                type: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ok" }
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/notifications:
    get:
      tags: [Notifications]
      summary: Mes notifications
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Notification" }
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags: [Notifications]
      summary: Créer une notification pour l’utilisateur courant
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ok" }
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/ai/chat:
    post:
      tags: [AI]
      summary: Chat assistant IA (OpenAI)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AiChatBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AiChatResponse" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          description: Prompt refusé par la modération
        "500":
          description: Erreur interne IA

  /api/upload:
    post:
      tags: [Upload]
      summary: Upload de fichier (multipart/form-data)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url: { type: string }

  /api/admin/users:
    get:
      tags: [Admin]
      summary: Lister les utilisateurs (admin)
      description: Requiert un JWT avec rôle `admin`.
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: string }
                    email: { type: string }
                    role: { type: string, enum: [user, premium, admin] }
                    createdAt: { type: string, format: date-time }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden (role insuffisant)

  /api/admin/users/{id}:
    delete:
      tags: [Admin]
      summary: Supprimer un utilisateur (admin)
      description: Requiert un JWT avec rôle `admin`.
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Message" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden (role insuffisant)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    NotFound:
      description: Not Found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }

  schemas:
    # Auth
    AuthLoginBody:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
    AuthRegisterBody:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
        displayName: { type: string }
    AuthLoginResponse:
      type: object
      properties:
        token: { type: string }
        user:
          type: object
          properties:
            id: { type: string }
            email: { type: string }
            role: { type: string, enum: [user, premium, admin] }

    # Home
    HomeSummary:
      type: object
      properties:
        cards:
          type: array
          items: { $ref: "#/components/schemas/ProjectCard" }
        totals:
          type: object
          properties:
            enCours: { type: integer }
            termines: { type: integer }
            planifies: { type: integer }
            total: { type: integer }
        insights:
          type: object
          nullable: true
          properties:
            unread:
              type: object
              properties:
                notifications: { type: integer }
            recentExports:
              type: array
              items:
                type: object
                properties:
                  id: { type: string }
                  type: { type: string }
                  status: { type: string }
                  projectId: { type: string }
                  pageId: { type: string, nullable: true }
                  createdAt: { type: string, format: date-time }
            lastActivity:
              type: string
              format: date-time
              nullable: true

    # Projects
    ProjectStatusAPI:
      type: string
      enum: [PLANIFIE, EN_COURS, TERMINE]
    ProjectCard:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        subtitle: { type: string, nullable: true }
        status: { $ref: "#/components/schemas/ProjectStatusAPI" }
        icon: { type: string, nullable: true }
        updatedAt: { type: string, format: date-time }
    ProjectDetail:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        subtitle: { type: string, nullable: true }
        icon: { type: string, nullable: true }
        status: { $ref: "#/components/schemas/ProjectStatusAPI" }
        schema: { type: object, additionalProperties: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    ProjectCreateBody:
      type: object
      required: [name]
      properties:
        name: { type: string }
        tagline: { type: string }
        icon: { type: string }
        status: { $ref: "#/components/schemas/ProjectStatusAPI" }
    ProjectUpdateBody:
      type: object
      properties:
        name: { type: string }
        tagline: { type: string }
        icon: { type: string }
        status: { $ref: "#/components/schemas/ProjectStatusAPI" }
        schema: { type: object, additionalProperties: true }

    # Pages
    Page:
      type: object
      properties:
        id: { type: string }
        projectId: { type: string }
        name: { type: string }
        data: { type: array, items: {}, nullable: true }
        order: { type: integer }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    PageCreateBody:
      type: object
      required: [name]
      properties:
        name: { type: string }
        data:
          type: array
          items: {}
    PageUpdateBody:
      type: object
      properties:
        data:
          type: array
          items: {}

    # Exports
    Export:
      type: object
      properties:
        id: { type: string }
        projectId: { type: string }
        pageId: { type: string, nullable: true }
        type: { type: string }
        content: { type: string, nullable: true }
        status: { type: string }
        bundleUrl: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
    ExportCreateBody:
      type: object
      required: [type, content]
      properties:
        type: { type: string, example: html }
        content: { type: string }
        projectId: { type: string }
        pageId: { type: string }

    # Badges & Notifications
    Badge:
      type: object
      properties:
        id: { type: string }
        type: { type: string }
        userId: { type: string }
        createdAt: { type: string, format: date-time }
    Notification:
      type: object
      properties:
        id: { type: string }
        userId: { type: string }
        message: { type: string }
        seen: { type: boolean }
        createdAt: { type: string, format: date-time }

    # AI
    AiChatBody:
      type: object
      required: [prompt]
      properties:
        prompt: { type: string, maxLength: 1000 }
        history:
          type: array
          items:
            type: object
            properties:
              role: { type: string, enum: [system, user, assistant] }
              content: { type: string }
    AiChatResponse:
      type: object
      properties:
        answer: { type: string }

    # Commons
    Ok:
      type: object
      properties:
        ok: { type: boolean, example: true }
    Message:
      type: object
      properties:
        message: { type: string }
    Error:
      type: object
      properties:
        message: { type: string }
