import { Router } from "express";
import { param } from "express-validator";
import {
  startDeployment,
  getDeploymentStatus,
  getDeploymentHistory,
  rollbackDeployment,
  getDeploymentLogs,
  cancelDeployment,
  restartDeployment,
  listAllDeployments,
} from "../controllers/deployController";
import { authenticate, authorize } from "../middlewares/security";
import { validateBody } from "../middlewares/validator";
import { handleValidationErrors } from "../middlewares/validate";
import { deploySchema } from "../validators/deploy.schema";

const router = Router();

/* ============================================================================
 *  DEPLOYMENT ROUTES ‚Äì utilisateur authentifi√©
 * ========================================================================== */
router.use(authenticate);

/**
 * POST /api/deploy/:projectId
 * üöÄ Lancer un d√©ploiement
 */
router.post(
  "/:projectId",
  param("projectId").isString().isLength({ min: 8 }),
  handleValidationErrors,
  validateBody(deploySchema),
  startDeployment
);

/**
 * GET /api/deploy/:projectId/status
 * üìä Statut du dernier d√©ploiement
 */
router.get(
  "/:projectId/status",
  param("projectId").isString(),
  handleValidationErrors,
  getDeploymentStatus
);

/**
 * GET /api/deploy/:projectId/history
 * üïí Historique complet des d√©ploiements d‚Äôun projet
 */
router.get(
  "/:projectId/history",
  param("projectId").isString(),
  handleValidationErrors,
  getDeploymentHistory
);

/**
 * POST /api/deploy/:projectId/:deployId/rollback
 * ‚Ü©Ô∏è Rollback vers une version pr√©c√©dente
 */
router.post(
  "/:projectId/:deployId/rollback",
  param("projectId").isString(),
  param("deployId").isString(),
  handleValidationErrors,
  rollbackDeployment
);

/**
 * GET /api/deploy/:projectId/:deployId/logs
 * üìú Logs d√©taill√©s d‚Äôun d√©ploiement
 */
router.get(
  "/:projectId/:deployId/logs",
  param("projectId").isString(),
  param("deployId").isString(),
  handleValidationErrors,
  getDeploymentLogs
);

/**
 * DELETE /api/deploy/:projectId/cancel
 * ‚ùå Annuler un d√©ploiement en cours
 */
router.delete(
  "/:projectId/cancel",
  param("projectId").isString(),
  handleValidationErrors,
  cancelDeployment
);

/**
 * POST /api/deploy/:projectId/restart
 * üîÑ Relancer le dernier d√©ploiement √©chou√©
 */
router.post(
  "/:projectId/restart",
  param("projectId").isString(),
  handleValidationErrors,
  restartDeployment
);

/* ============================================================================
 *  ADMIN ROUTES ‚Äì uniquement administrateurs
 * ========================================================================== */
/**
 * GET /api/deploy/admin/deployments
 * üîê Lister tous les d√©ploiements
 */
router.get(
  "/admin/deployments",
  authorize(["ADMIN"]),
  listAllDeployments
);

export default router;
