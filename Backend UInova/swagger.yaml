openapi: 3.0.3
info:
  title: UInova API
  version: "3.0.0"
servers:
  - url: http://localhost:5000

paths:
  /api/auth/login:
    post:
      summary: Login utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user:
                    type: object
                    properties:
                      id: { type: string }
                      email: { type: string }
                      role: { type: string, enum: [USER, PREMIUM, ADMIN] }

  /api/auth/register:
    post:
      summary: Inscription utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
                name: { type: string }
      responses:
        "200": { description: OK }

  /api/projects:
    get:
      summary: Liste des projets
      security: [ { bearerAuth: [] } ]
      responses: { "200": { description: OK } }

  # ⚡ Marketplace
  /api/marketplace/items:
    get:
      summary: Liste des templates marketplace
      security: [ { bearerAuth: [] } ]
      responses: { "200": { description: OK } }
    post:
      summary: Publier un template marketplace
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                price: { type: number }
                contentUrl: { type: string }
      responses: { "201": { description: Created } }

  /api/marketplace/items/{id}:
    get:
      summary: Détail d’un template marketplace
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses: { "200": { description: OK } }

  /api/marketplace/purchase:
    post:
      summary: Acheter un template marketplace
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId: { type: string }
      responses: { "200": { description: OK } }

  # ⚡ Deploy
  /api/deploy/{projectId}:
    post:
      summary: Lancer un déploiement cloud
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: projectId
          required: true
          schema: { type: string }
      responses: { "201": { description: Déploiement lancé } }

  /api/deploy/{projectId}/status:
    get:
      summary: Statut du dernier déploiement
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: projectId
          required: true
          schema: { type: string }
      responses: { "200": { description: OK } }

  /api/deploy/{projectId}/history:
    get:
      summary: Historique des déploiements d’un projet
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: projectId
          required: true
          schema: { type: string }
      responses: { "200": { description: OK } }

  # ⚡ Replay
  /api/replay/{projectId}/start:
    post:
      summary: Démarrer un replay collaboratif
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: projectId
          required: true
          schema: { type: string }
      responses: { "201": { description: Replay démarré } }

  /api/replay/{projectId}/stop:
    post:
      summary: Arrêter un replay collaboratif
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: projectId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                replayId: { type: string }
                dataUrl: { type: string }
      responses: { "200": { description: Replay arrêté } }

  /api/replay/{projectId}:
    get:
      summary: Liste des replays d’un projet
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: projectId
          required: true
          schema: { type: string }
      responses: { "200": { description: OK } }

  /api/replay/{projectId}/{replayId}:
    get:
      summary: Détail d’un replay collaboratif
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: projectId
          required: true
          schema: { type: string }
        - in: path
          name: replayId
          required: true
          schema: { type: string }
      responses: { "200": { description: OK } }

  # ⚡ Monitoring
  /api/monitoring/metrics:
    get:
      summary: Récupérer métriques système (JSON)
      security: [ { bearerAuth: [] } ]
      responses: { "200": { description: OK } }

  /api/monitoring/logs:
    get:
      summary: Derniers AuditLogs
      security: [ { bearerAuth: [] } ]
      responses: { "200": { description: OK } }

  /api/monitoring/health:
    get:
      summary: État du serveur
      security: [ { bearerAuth: [] } ]
      responses: { "200": { description: OK } }

  /api/monitoring/prometheus:
    get:
      summary: Métriques format Prometheus (Grafana)
      responses: { "200": { description: OK, content: { "text/plain": { schema: { type: string } } } } }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
