openapi: 3.0.3
info:
  title: UInova API
  version: "2.0.0"
  description: >
    Documentation de l’API **UInova Phase 2**  
    Inclut auth, projets, pages, paiements, exports, collaboration, notifications, badges, uploads.

servers:
  - url: http://localhost:4000

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

tags:
  - name: Auth
  - name: Projects
  - name: Pages
  - name: Exports
  - name: Payments
  - name: Badges
  - name: Notifications
  - name: Uploads
  - name: Collaboration
  - name: Health

paths:
  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
                  user:
                    type: object
                    properties:
                      id: { type: string }
                      email: { type: string }
                      displayName: { type: string, nullable: true }

  /api/auth/register:
    post:
      tags: [Auth]
      summary: Inscription utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
                displayName: { type: string }
      responses:
        "200": { description: OK }

  /api/auth/me:
    get:
      tags: [Auth]
      security: [{ bearerAuth: [] }]
      summary: Infos utilisateur courant
      responses:
        "200": { description: OK }

  /api/home:
    get:
      tags: [Projects]
      security: [{ bearerAuth: [] }]
      summary: Accueil projets (cards + totals)
      responses:
        "200":
          description: OK

  /api/projects:
    get:
      tags: [Projects]
      security: [{ bearerAuth: [] }]
      summary: Liste filtrée des projets
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [EN_COURS, TERMINE, PLANIFIE] }
      responses:
        "200": { description: OK }
    post:
      tags: [Projects]
      security: [{ bearerAuth: [] }]
      summary: Créer un projet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                tagline: { type: string }
                icon: { type: string }
                status: { type: string, enum: [EN_COURS, TERMINE, PLANIFIE] }
      responses:
        "201": { description: Created }

  /api/projects/{id}:
    get:
      tags: [Projects]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }
    put:
      tags: [Projects]
      security: [{ bearerAuth: [] }]
      summary: Mettre à jour un projet
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                tagline: { type: string }
                icon: { type: string }
                status: { type: string, enum: [EN_COURS, TERMINE, PLANIFIE] }
                schema: {}
      responses:
        "200": { description: OK }

  /api/pages:
    post:
      tags: [Pages]
      security: [{ bearerAuth: [] }]
      summary: Créer une page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [projectId, name]
              properties:
                projectId: { type: string }
                name: { type: string }
                schemaJSON: { type: object }
      responses:
        "201": { description: Created }

  /api/exports:
    post:
      tags: [Exports]
      security: [{ bearerAuth: [] }]
      summary: Lancer un export
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [projectId, target]
              properties:
                projectId: { type: string }
                target: { type: string, enum: [HTML, REACT, FLUTTER, PWA, ZIP] }
      responses:
        "200": { description: Export lancé }

  /api/payments/checkout:
    post:
      tags: [Payments]
      security: [{ bearerAuth: [] }]
      summary: Démarrer un paiement
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [provider, amountCents, currency]
              properties:
                provider: { type: string, enum: [STRIPE, PAYPAL, CINETPAY] }
                amountCents: { type: integer }
                currency: { type: string }
      responses:
        "200": { description: URL ou secret de paiement }

  /api/badges:
    get:
      tags: [Badges]
      security: [{ bearerAuth: [] }]
      summary: Liste des badges
      responses:
        "200": { description: OK }

  /api/notifications:
    get:
      tags: [Notifications]
      security: [{ bearerAuth: [] }]
      summary: Récupérer les notifications
      responses:
        "200": { description: OK }

  /api/upload:
    post:
      tags: [Uploads]
      security: [{ bearerAuth: [] }]
      summary: Upload fichier
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200": { description: Fichier uploadé }

  /api/collab/history/{projectId}:
    get:
      tags: [Collaboration]
      security: [{ bearerAuth: [] }]
      summary: Récupère l’historique des modifications d’un projet
      parameters:
        - name: projectId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Historique }
    delete:
      tags: [Collaboration]
      security: [{ bearerAuth: [] }]
      summary: Supprime l’historique d’un projet (admin)
      parameters:
        - name: projectId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }

  /api/collab/replay/{projectId}:
    get:
      tags: [Collaboration]
      security: [{ bearerAuth: [] }]
      summary: Rejoue l’historique et renvoie l’état final
      parameters:
        - name: projectId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Replay }

  /api/health:
    get:
      tags: [Health]
      summary: Vérifie l’état du serveur
      responses:
        "200": { description: OK }
