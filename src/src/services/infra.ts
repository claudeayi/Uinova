// src/services/deployments.ts
import http from "./http";

/* ============================================================================
 * Typings
 * ========================================================================== */
export type DeploymentStatus = "PENDING" | "RUNNING" | "SUCCESS" | "ERROR" | "CANCELED";

export interface Deployment {
  id: string;
  projectId: string;
  status: DeploymentStatus;
  url?: string;
  logs?: string;
  createdAt: string;
  updatedAt: string;
}

function emitEvent(name: string, detail?: any) {
  window.dispatchEvent(new CustomEvent(`deploy:${name}`, { detail }));
}

/* ============================================================================
 * API D√©ploiement
 * ========================================================================== */

/**
 * üöÄ D√©ployer un projet
 */
export async function deployProject(projectId: string): Promise<{ url?: string } | null> {
  try {
    const res = await http.post(`/infra/deploy`, { projectId });
    emitEvent("started", { projectId });
    return res.data;
  } catch (err) {
    console.error("‚ùå Erreur deployProject:", err);
    return null;
  }
}

/**
 * üìã Liste des d√©ploiements d‚Äôun projet
 */
export async function getDeployments(projectId: string): Promise<Deployment[]> {
  try {
    const res = await http.get(`/infra/deployments/${projectId}`);
    return res.data as Deployment[];
  } catch (err) {
    console.error("‚ùå Erreur getDeployments:", err);
    return [];
  }
}

/**
 * üì° Statut d‚Äôun d√©ploiement en cours
 */
export async function getDeploymentStatus(projectId: string): Promise<Deployment | null> {
  try {
    const res = await http.get(`/infra/deploy/${projectId}/status`);
    return res.data as Deployment;
  } catch (err) {
    console.error("‚ùå Erreur getDeploymentStatus:", err);
    return null;
  }
}

/**
 * üìú R√©cup√©rer logs d‚Äôun d√©ploiement
 */
export async function getDeploymentLogs(projectId: string): Promise<string | null> {
  try {
    const res = await http.get(`/infra/deploy/${projectId}/logs`, {
      responseType: "text",
    });
    return res.data;
  } catch (err) {
    console.error("‚ùå Erreur getDeploymentLogs:", err);
    return null;
  }
}

/**
 * ‚ùå Annuler un d√©ploiement en cours
 */
export async function cancelDeployment(projectId: string): Promise<boolean> {
  try {
    await http.post(`/infra/deploy/${projectId}/cancel`);
    emitEvent("canceled", { projectId });
    return true;
  } catch (err) {
    console.error("‚ùå Erreur cancelDeployment:", err);
    return false;
  }
}

/**
 * üîÑ Relancer un d√©ploiement
 */
export async function restartDeployment(projectId: string): Promise<boolean> {
  try {
    await http.post(`/infra/deploy/${projectId}/restart`);
    emitEvent("restarted", { projectId });
    return true;
  } catch (err) {
    console.error("‚ùå Erreur restartDeployment:", err);
    return false;
  }
}

/**
 * ‚Ü©Ô∏è Rollback vers un d√©ploiement pr√©c√©dent
 */
export async function rollbackDeployment(
  projectId: string,
  deployId: string
): Promise<boolean> {
  try {
    await http.post(`/infra/deploy/${projectId}/rollback/${deployId}`);
    emitEvent("rollback", { projectId, deployId });
    return true;
  } catch (err) {
    console.error("‚ùå Erreur rollbackDeployment:", err);
    return false;
  }
}

/* ============================================================================
 * Helpers avanc√©s
 * ========================================================================== */

/**
 * ‚è±Ô∏è Suivi en temps r√©el d‚Äôun d√©ploiement
 * Polling toutes les `intervalMs` ms
 */
export function watchDeploymentStatus(
  projectId: string,
  intervalMs = 5000,
  onUpdate?: (d: Deployment | null) => void
) {
  const interval = setInterval(async () => {
    const status = await getDeploymentStatus(projectId);
    if (onUpdate) onUpdate(status);
    emitEvent("status", { projectId, status });
    if (!status || ["SUCCESS", "ERROR", "CANCELED"].includes(status.status)) {
      clearInterval(interval);
    }
  }, intervalMs);
  return () => clearInterval(interval);
}

/**
 * üì• T√©l√©charger les logs en fichier .txt
 */
export async function downloadDeploymentLogs(projectId: string) {
  const logs = await getDeploymentLogs(projectId);
  if (!logs) return;

  const blob = new Blob([logs], { type: "text/plain" });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `deploy_${projectId}_logs.txt`;
  a.click();
  window.URL.revokeObjectURL(url);
}
