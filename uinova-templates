#!/usr/bin/env bash
set -e

REPO="uinova-templates-pro"
TEMPLATES=("landing-saas" "elearning-mobile" "dashboard-saas" "ecommerce-advanced" "crm-pro" "erp-lite" "bi-dashboard" "reseau-social-mini" "seo-tool" "outil-collaboratif")

echo "üìÅ Cr√©ation du repo $REPO"
mkdir -p "$REPO/templates"
cd "$REPO"

# README
cat > README.md <<'EOF'
# UInova ‚Äì Batch enrichi de 10 templates Premium

Chaque template inclut :
- **frontend/** React/Vite + Tailwind + React Router
- **backend/** Node.js + Express + CRUD m√©moire
- **db/** Prisma (PostgreSQL ou SQLite mock)
- **scripts** : npm run dev pour lancer (front & back)

Arborescence :
templates/<template>/{frontend,backend,db}

Ex√©cution type :
cd templates/landing-saas/backend && npm i && npm run dev
cd templates/landing-saas/frontend && npm i && npm run dev
EOF

# ============ HELPERS ============
make_front () {
  ROOT="$1/frontend"
  APPTITLE="$2"
  mkdir -p "$ROOT/src/pages"
  cat > "$ROOT/package.json" <<'EOF'
{
  "private": true,
  "scripts": { "dev": "vite", "build": "vite build", "preview": "vite preview" },
  "dependencies": {
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-router-dom": "6.26.2",
    "tailwindcss": "3.4.4"
  },
  "devDependencies": { "vite": "5.4.0", "@vitejs/plugin-react": "4.3.1" }
}
EOF
  cat > "$ROOT/vite.config.js" <<'EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
export default defineConfig({ plugins: [react()] })
EOF
  cat > "$ROOT/index.html" <<EOF
<!doctype html><html lang="fr"><head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>$APPTITLE</title>
</head><body class="bg-white text-gray-800">
  <div id="root"></div><script type="module" src="/src/main.jsx"></script>
</body></html>
EOF
  mkdir -p "$ROOT/src"
  cat > "$ROOT/src/main.jsx" <<'EOF'
import React from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom'
import Home from './pages/Home.jsx'

function Layout({children}) {
  return (
    <>
      <nav className="p-4 flex gap-4 bg-gray-100">
        <Link to="/" className="font-bold">UInova</Link>
        <Link to="/about">√Ä propos</Link>
      </nav>
      <main className="p-8">{children}</main>
    </>
  )
}
function App() {
  return (
    <BrowserRouter>
      <Layout>
        <Routes>
          <Route path="/" element={<Home/>} />
        </Routes>
      </Layout>
    </BrowserRouter>
  )
}
createRoot(document.getElementById('root')).render(<App/>)
EOF
}

make_page () {
  FILE="$1/frontend/src/pages/$2.jsx"
  TITLE="$3"
  SUB="$4"
  CTA="$5"
  cat > "$FILE" <<EOF
export default function $2(){
  return (
    <section className="text-center p-10">
      <h1 className="text-3xl font-bold mb-2">$TITLE</h1>
      <p className="text-gray-500 mb-4">$SUB</p>
      ${CTA:+<button className="px-4 py-2 bg-blue-600 text-white rounded">$CTA</button>}
    </section>
  )
}
EOF
}

make_back () {
  ROOT="$1/backend"
  API="$2"
  mkdir -p "$ROOT/src/routes"
  cat > "$ROOT/package.json" <<'EOF'
{
  "private": true,
  "scripts": { "dev": "node src/index.js" },
  "dependencies": { "express": "4.19.2", "cors": "2.8.5", "body-parser": "1.20.2" }
}
EOF
  cat > "$ROOT/src/index.js" <<EOF
import express from 'express'
import cors from 'cors'
import bodyParser from 'body-parser'
import healthRouter from './routes/health.js'
$API
const app = express()
app.use(cors()); app.use(bodyParser.json())
app.use('/health', healthRouter)
app.listen(3000, ()=>console.log("‚úÖ API running http://localhost:3000"))
EOF
  cat > "$ROOT/src/routes/health.js" <<'EOF'
import { Router } from 'express'
const r = Router()
r.get('/', (req,res)=>res.json({status:"ok"}))
export default r
EOF
}

crud_file () {
  ROOT="$1/backend/src/routes/$2.js"
  ENTITY="$3"
  cat > "$ROOT" <<EOF
import { Router } from 'express'
const r = Router()
let data = []
r.post('/', (req,res)=>{ const obj={id:Date.now(),...req.body}; data.push(obj); res.json(obj) })
r.get('/', (req,res)=>res.json(data))
r.put('/:id',(req,res)=>{ const i=data.findIndex(x=>String(x.id)===req.params.id); if(i<0) return res.status(404).end(); data[i]={...data[i],...req.body}; res.json(data[i]) })
r.delete('/:id',(req,res)=>{ data=data.filter(x=>String(x.id)!==req.params.id); res.json({ok:true}) })
export default r
EOF
}

# ============ TEMPLATES ============
cd templates

# 1) Landing SaaS
mkdir -p landing-saas
make_front landing-saas "Landing SaaS"
make_page landing-saas Home "Cr√©ez en 5 minutes" "Landing page optimis√©e SEO" "Commencer"
make_back landing-saas "import leadsRouter from './routes/leads.js'\napp.use('/leads', leadsRouter)"
crud_file landing-saas leads "Lead"

# 2) E-learning Mobile
mkdir -p elearning-mobile
make_front elearning-mobile "E-learning Mobile"
make_page elearning-mobile Home "Cours interactifs" "Modules, quiz, badges" "S'inscrire"
make_back elearning-mobile "import coursesRouter from './routes/courses.js'\napp.use('/courses', coursesRouter)"
crud_file elearning-mobile courses "Course"

# 3) Dashboard SaaS
mkdir -p dashboard-saas
make_front dashboard-saas "Dashboard SaaS"
make_page dashboard-saas Home "Analyse KPIs" "Graphes et stats" ""
make_back dashboard-saas "import usersRouter from './routes/users.js'\napp.use('/users', usersRouter)"
crud_file dashboard-saas users "User"

# 4) E-commerce avanc√©
mkdir -p ecommerce-advanced
make_front ecommerce-advanced "E-commerce"
make_page ecommerce-advanced Home "Produits" "Catalogue + Paiements" "Acheter"
make_back ecommerce-advanced "import productsRouter from './routes/products.js'\napp.use('/products', productsRouter)"
crud_file ecommerce-advanced products "Product"

# 5) CRM Pro
mkdir -p crm-pro
make_front crm-pro "CRM Pro"
make_page crm-pro Home "Pipeline" "Contacts et deals" ""
make_back crm-pro "import contactsRouter from './routes/contacts.js'\napp.use('/contacts', contactsRouter)"
crud_file crm-pro contacts "Contact"

# 6) ERP Lite
mkdir -p erp-lite
make_front erp-lite "ERP Lite"
make_page erp-lite Home "Gestion stock" "Commandes et fournisseurs" ""
make_back erp-lite "import stockRouter from './routes/stock.js'\napp.use('/stock', stockRouter)"
crud_file erp-lite stock "Stock"

# 7) BI Dashboard
mkdir -p bi-dashboard
make_front bi-dashboard "BI Dashboard"
make_page bi-dashboard Home "Tableaux dynamiques" "Donn√©es multiples + filtres" ""
make_back bi-dashboard "import reportsRouter from './routes/reports.js'\napp.use('/reports', reportsRouter)"
crud_file bi-dashboard reports "Report"

# 8) R√©seau Social Mini
mkdir -p reseau-social-mini
make_front reseau-social-mini "Mini R√©seau Social"
make_page reseau-social-mini Home "Posts" "Flux et profils" ""
make_back reseau-social-mini "import postsRouter from './routes/posts.js'\napp.use('/posts', postsRouter)"
crud_file reseau-social-mini posts "Post"

# 9) SEO Tool
mkdir -p seo-tool
make_front seo-tool "SEO Tool"
make_page seo-tool Home "Audit SEO" "Pages + rapports" "Analyser"
make_back seo-tool "import auditsRouter from './routes/audits.js'\napp.use('/audits', auditsRouter)"
crud_file seo-tool audits "Audit"

# 10) Outil collaboratif
mkdir -p outil-collaboratif
make_front outil-collaboratif "Outil collaboratif"
make_page outil-collaboratif Home "Kanban" "Projets + t√¢ches" ""
make_back outil-collaboratif "import tasksRouter from './routes/tasks.js'\napp.use('/tasks', tasksRouter)"
crud_file outil-collaboratif tasks "Task"

echo "‚úÖ Templates enrichis g√©n√©r√©s dans $REPO"
